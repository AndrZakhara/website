.skills-main-wrapper {
  background-color: #ffffff;
  padding-top: 74px;
  padding-bottom: 70px;
  min-height: 745px;
  .skills-wrapper {
    @include wrapper;
  }
  .skills-title {
    color: $text-skills-main-color;
    padding-bottom: 82px;
    p {
      max-width: 580px;
      margin: 0 auto;
    }
    @include block-header;
    .skills-header-line {
      @include block-header-line
    }
  }
}
.skills-content-wrapper {
  width: 100%;
  @include clearfix;
  .skills-content-item {
    @include skills-content-item;
    padding: 0 20px;
    color: $text-skills-main-color;
    text-align: center;
    .wrapper-chart-skills {
      width: 190px;
      margin: 0 auto;
    }
  }
}
svg {
  font-family: $font-regular;
}

$configs: (
  chart-wd: (
    svgSize: 160px,
    percentage: 90,
    strokeWidth: 13px,
    backgroundColor: #dfe8ed,
    foregroundColor: #30bae7,
    labelColor: #3c4761,
    labelFontSize: 3rem,
    duration: 3s,
    animationDelay: 1s
  ),
  chart-html: (
    svgSize: 160px,
    percentage: 75,
    strokeWidth: 13px,
    backgroundColor: #dfe8ed,
    foregroundColor: #d74680    ,
    labelColor: #3c4761,
    labelFontSize: 3rem,
    duration: 3s,
    animationDelay: 1s
  ),
  chart-gd: (
    svgSize: 160px,
    percentage: 70,
    strokeWidth: 13px,
    backgroundColor: #dfe8ed,
    foregroundColor: #15c7a8,
    labelColor: #3c4761,
    labelFontSize: 3rem,
    duration: 3s,
    animationDelay: 1s
  ),
  chart-ui: (
    svgSize: 160px,
    percentage: 85,
    strokeWidth: 13px,
    backgroundColor: #dfe8ed,
    foregroundColor: #eb7d4b,
    labelColor: #3c4761,
    labelFontSize: 3rem,
    duration: 3s,
    animationDelay: 1s
  )
);

$pi: 3.14;
$labelData: '';
@for $i from 0 to 101 {
  $labelData: $labelData + $i + '%' + '\a';
}

@each $chart, $param in $configs {

  $c: (map-get($param, svgSize) - map-get($param, strokeWidth)) * $pi;
  $cOffSet: (map-get($param, percentage)/100)*$c;

  .#{$chart} {
    width: map-get($param, svgSize);
    height: map-get($param, svgSize);
    margin: 0;
    position: relative;

    &.animate {
      svg .circle-foreground {
        animation: offset map-get($param, duration) ease-in-out forwards;
        animation-delay: map-get($param, animationDelay);
      }
      figcaption:after {
        animation: #{$chart}-label map-get($param, duration) steps(map-get($param, percentage)) forwards;
        animation-delay: map-get($param, animationDelay);
      }
    }

    svg {
      width: 100%;
      height: 100%;
      .circle-background {
        r: (map-get($param, svgSize) - map-get($param, strokeWidth))/2;
        cx: 50%;
        cy: 50%;
        fill: none;
        stroke: map-get($param, backgroundColor);
        stroke-width: map-get($param, strokeWidth);
      }
      .circle-foreground {
        @extend .circle-background;
        stroke: map-get($param, foregroundColor);
        stroke-dasharray: $cOffSet $c;
        stroke-dashoffset: $cOffSet;
        transform-origin: 50% 50%;
        transform: rotate(-90deg);
      }
    }
    figcaption {
      display: inline-block;
      width: 100%;
      height: map-get($param, labelFontSize);
      overflow: hidden;
      text-align: center;
      color: map-get($param, labelColor);
      position: absolute;
      top: calc(50% - #{map-get($param, labelFontSize)/2});
      left: 0;
      font-size: 0;
      &:after {
        display: inline-block;
        content: $labelData;
        white-space: pre;
        font-size: map-get($param, labelFontSize);
        font-family: $font-light;
        line-height: map-get($param, labelFontSize);
      }
    }
  }
  @keyframes #{$chart}-label {
    100% {
      transform: translateY(map-get($param, labelFontSize) * (-(map-get($param, percentage))));
    }
  }
}
@keyframes offset {
  100% {
    stroke-dashoffset: 0;
  }
}
figure {
  margin: 1rem!important;
}
